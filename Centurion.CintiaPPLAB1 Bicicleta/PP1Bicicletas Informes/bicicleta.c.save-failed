#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "bicicleta.h"
#include "tipo.h"
#include "color.h"
#include "dataStore.h"
#include "informes.h"
#include "clientes.h"



void mostrarBici(eBici x, eTipo tipos[], int tamT, eColor colores[], int tamC)
{
    char nombreColor[20];
    char descripcion[20];

    cargarDescripcionColor(nombreColor, x.idColor, colores, tamC);
    cargarDescripcionTipo(descripcion, x.idTipo,tipos, tamT);


    printf("%d    %10s         %.2f             %10s         %10s\n", x.id, x.marca, x.rodado,nombreColor, descripcion);
}


void mostrarBicicletas(eBici vec[], int tam, eTipo tipos[], int tamT, eColor colores[], int tamC)
{

    int flag =0;


    printf("\n\n");
    printf("                                 Listado de Bicicletas\n");
    printf("***************************************************************************************************\n\n");

    printf("  Id        Marca         Rodado                Color               Tipo       \n");
    printf("----------------------------------------------------------------------------------------------------\n\n");

    for (int i =0; i < tam; i ++)
    {


        if(vec[i].isEmpty == 0)
        {

            mostrarBici(vec[i], tipos, tamT, colores, tamC);

            flag = 1;
        }

    }
    if (flag ==0)
    {
        printf("No hay Bicicletas que mostrar\n\n");
    }
}


int inicializarBicicletas(eBici vec[], int tam)
{
    int error = 1;//hay error

    if(vec != NULL && tam > 0) //validar vectores sea distinto de NULL
    {

        for(int i = 0; i < tam; i ++)
        {
            vec[i].isEmpty =1;
        }

        error =0;
    }
    return error;
}

int buscarLibre(eBici vec [], int tam)
{
    int indice = -1; // esta precargado indice NO hace falta hacer un ELSE. (-1) ESTA LLENO NO HAY LUGAR.

    for(int i = 0; i < tam; i ++ )
    {
        if( vec[i].isEmpty == 1 ) //Entro, significa que la estructura eta  vacia es igual a 1.
        {
            indice = i;
            break;
        }

    }

    return indice;
}

int buscarBicicetas(int id, eBici vec[], int tam)
{

    int indice = -1;

    for ( int i =0; i < tam ; i ++)
    {

        if(vec[i].id == id && vec[i].isEmpty == 0)
        {
            indice = i;
            break;
        }
    }

    return indice;
}

int altaBicicletas(eBici vec[], int tam, eColor colores[], int tamC, eTipo tipos[],int tamT, int id)
{
    int error = 1;
    int indice;
    int idColor;
    int idTipo;
    int idCliente;
    char sexo;

    eBici nuevaBici;



    if(vec != NULL && tam > 0 && id > 0)
    {
        system("cls");
        printf("-------------------Alta Bicicletas-------------------\n\n");
        printf("------------------------------------------------\n\n");
        indice = buscarLibre(vec, tam);

        if(indice == -1)
        {
            printf("Sistema completo!!!\n");
        }
        else
        {
            nuevaBici.id = id; //(legajo que me llego por parametro)
            nuevaBici.isEmpty = 0;



            printf("Ingrese Marca: ");
            fflush(stdin);
            gets(nuevaBici.marca);


            mostrarColores(colores, tamC);
            printf("Ingrese Id Color: ");
            scanf("%d", &idColor);

            while(validarIdColor(colores, tamC,idColor)==0)
            {
                printf("Id Invalido.Reingrese Id Color: ");
                scanf("%d", &idColor);
            }
            nuevaBici.idColor = idColor;



            mostrarTipos(tipos, tamT);
            printf("Ingrese Id Tipos: ");
            scanf("%d", &idTipo);

            while(validarIdTipo(tipos, tamT,idTipo)==0)
            {
                printf("Id Invalido.Reingrese Id Tipo: ");
                scanf("%d", &idTipo);
            }
            nuevaBici.idTipo = idTipo;



            printf("Ingrese un Rodado de 20-26-27,5-29: ");
            scanf("%f", &nuevaBici.rodado);





            vec[indice] = nuevaBici;// nuestra estructura persona

            error = 0;
        }

    }
    return  error;
}





int harcodearBicicletas(eBici vec[], int tam, int cant)
{

    int retorno = -1; // si hay error retorna -1

    if(vec !=NULL && tam > 0 && cant <= tam)
    {
        retorno =0;
        for (int i =0; i < cant; i ++)
        {
            vec[i].id = ids[i];
            strcpy(vec[i].marca, marcas[i]);
            vec[i].idColor = idColores[i];
            vec[i].idTipo = idTipos[i];
            vec[i].rodado = rodados[i];
            //vec[i].fechaIngreso.dia = dias[i];
            //vec[i].fechaIngreso.mes = meses[i];
            //vec[i].fechaIngreso.anio = anios[i];


            //se Puede cargar de a uno o puedo a traves del harcodeo---
            //personas[i].fNac = fechas[i];
            vec[i].isEmpty = 0; //no vacio 0 - vacio 1
            retorno++; // devuelvo retorno que devuelva la cantidad que cargue
        }


    }


    return retorno;
}

int modificarBicicleta(eBici vec[], int tam,eTipo tipos[], int tamT, eColor colores[], int tamC)
{
    int error =1;
    int indice;
    int id;
    //eFecha nuevaFecha;
    //int nuevoColor;
    int nuevoTipo;
    float nuevoRodado;


    char confirma;

    int opcion;



    if(vec != NULL && tam > 0 )
    {

        system("cls");
        printf("-------------------------------------Modificar Bicicleta-------------------------------------------------\n\n");
        printf("-----------------------------------------------------------------------------------------------------\n\n");

        mostrarBicicletas(vec, tam,tipos, tamT,colores, tamC);
        printf("\n\n");
        printf("Ingrese el Id de la bicicleta a modificar: ");
        scanf("%d", &id);

        indice = buscarBicicetas(id,vec, tam);

        if( indice == -1)

        {
            printf("No existe una moto con ese Id\n\n");

        }
        else
        {



            do
            {
                system("cls");
                printf("-------------------------------------Modificar Bicicleta-------------------------------------------------\n\n");
                printf("MENU MODIFICAR CAMPO -------------------------------------------------------------------------------\n\n");
                printf("1.Tipo\n");
                printf("2.Rodado\n");


                printf("\n\nLa Bicicleta a modificar es :\n\n");
                mostrarBici(vec[indice], tipos, tamT, colores, tamC);

                printf("Ingrese una opcion: ");
                scanf("%d", &opcion);

                //utn_getNumero(&opcion, "\nIngrese un numero del submenu: ", "Error debe ingresar un numero valido\n", 1, 2,2);

                switch(opcion)
                {


                case 1:
                    printf("\nIngrese nuevo Tipo de Bicicleta: \n* 1000- Rutera \n* 1001- Carrera  \n* 1002- Mountain  \n* 1003- BMX \n\n");
                    scanf("%d",&nuevoTipo);
                    vec[indice].idTipo = nuevoTipo;

                    // printf("Se ha actualizado Tipo de moto con exito\n\n");

                    break;



                case 2:


                    printf("Ingrese un nuevo Rodado de 20-26-27,5-29: ");
                    scanf("%f",&nuevoRodado);

                    vec[indice].rodado = nuevoRodado;
                    //printf("Se ha actualizado el Cilindrada con exito\n\n");

                    break;


                }
                mostrarBici(vec[indice], tipos, tamT, colores, tamC);

                printf("\nSigue modificando? ");
                fflush(stdin);
                scanf("%c", &confirma);
                confirma = tolower(confirma);
                if(confirma== 's')
                {


                    error =0;
                }
                else
                {
                    error = 2;

                }


            }
            while(confirma =='s');

        }


    }
    return error;
}

int bajaBicicleta(eBici vec[], int tam,eTipo tipos[], int tamT, eColor colores[], int tamC)
{
    int error =1;
    int indice;
    int id;
    char confirma;


    if(vec != NULL && tam > 0)
    {
        system("cls");
        printf("------------------------------------- Sistemas de Baja de Bicicletas -------------------------------------------------\n\n");
        printf("----------------------------------------------------------------------------------------------------------------- \n\n");

        mostrarBicicletas(vec, tam, tipos, tamT, colores, tamC);
        printf("\n\n");
        printf("Ingrese el legajo a eliminar: ");
        scanf("%d", &id);

        indice = buscarBicicetas(id, vec, tam);

        if( indice == -1)
        {
            printf("No hay ninguna Bicicleta con ese Id\n\n");

        }
        else
        {
            mostrarBici(vec[indice], tipos, tamT, colores, tamC);
            printf("\nConfirma baja de la Bicicleta? ");
            fflush(stdin);
            scanf("%c", &confirma);
            confirma = tolower(confirma);
            if(confirma== 's')
            {
                vec[indice].isEmpty =1;
                error =0;
            }
            else
            {
                error = 2;

            }
        }

    }
    return error;
}


int ordenarBicicletas(eBici vec[], int tam, int orden)
{
    int isOk = -1;
    eBici auxN;

    if(vec != NULL)
    {
        for(int i = 0; i < tam -1; i++)
        {
            for(int j = i + 1; j < tam; j ++)
            {
                if(vec[i].isEmpty == 0 && vec[j].isEmpty == 0)
                {

                    if(orden == 1)
                    {
                        if(vec[i].idTipo > vec[j].idTipo || (vec[i].idTipo == vec[j].idTipo && vec[i].rodado > vec[j].rodado))
                        {
                            auxN = vec[i];
                            vec[i] = vec[j];
                            vec[j] = auxN;
                        }

                    }
                    else if(orden == 0)
                    {
                        if(vec[i].idTipo < vec[j].idTipo || (vec[i].idTipo == vec[j].idTipo && vec[i].rodado < vec[j].rodado))
                        {
                            auxN = vec[i];
                            vec[i] = vec[j];
                            vec[j] = auxN;
                        }

                    }
                }
            }
        }
        isOk = 0;
    }
    return isOk;
}



